/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { MatchResults, RouterHistory } from "@stencil-community/router";
export namespace Components {
    interface AppHome {
        "history": RouterHistory;
    }
    interface AppProfile {
        "match": MatchResults;
    }
    interface AppRoot {
    }
    interface CreateExpense {
        "history": RouterHistory;
    }
    interface CustomButton {
        "color": 'danger' | 'success' | 'secondary';
        "disabled": boolean;
        "type": 'button' | 'submit' | 'reset';
    }
    interface ExpenseChart {
        "history": RouterHistory;
    }
    interface ExpenseDetails {
        "match": MatchResults;
    }
    interface ExpenseEdit {
        "history": RouterHistory;
        "match": MatchResults;
    }
    interface ModeSwitcher {
    }
    interface NavBar {
        "items": { label: string; url: string }[];
    }
}
declare global {
    interface HTMLAppHomeElement extends Components.AppHome, HTMLStencilElement {
    }
    var HTMLAppHomeElement: {
        prototype: HTMLAppHomeElement;
        new (): HTMLAppHomeElement;
    };
    interface HTMLAppProfileElement extends Components.AppProfile, HTMLStencilElement {
    }
    var HTMLAppProfileElement: {
        prototype: HTMLAppProfileElement;
        new (): HTMLAppProfileElement;
    };
    interface HTMLAppRootElement extends Components.AppRoot, HTMLStencilElement {
    }
    var HTMLAppRootElement: {
        prototype: HTMLAppRootElement;
        new (): HTMLAppRootElement;
    };
    interface HTMLCreateExpenseElement extends Components.CreateExpense, HTMLStencilElement {
    }
    var HTMLCreateExpenseElement: {
        prototype: HTMLCreateExpenseElement;
        new (): HTMLCreateExpenseElement;
    };
    interface HTMLCustomButtonElement extends Components.CustomButton, HTMLStencilElement {
    }
    var HTMLCustomButtonElement: {
        prototype: HTMLCustomButtonElement;
        new (): HTMLCustomButtonElement;
    };
    interface HTMLExpenseChartElement extends Components.ExpenseChart, HTMLStencilElement {
    }
    var HTMLExpenseChartElement: {
        prototype: HTMLExpenseChartElement;
        new (): HTMLExpenseChartElement;
    };
    interface HTMLExpenseDetailsElement extends Components.ExpenseDetails, HTMLStencilElement {
    }
    var HTMLExpenseDetailsElement: {
        prototype: HTMLExpenseDetailsElement;
        new (): HTMLExpenseDetailsElement;
    };
    interface HTMLExpenseEditElement extends Components.ExpenseEdit, HTMLStencilElement {
    }
    var HTMLExpenseEditElement: {
        prototype: HTMLExpenseEditElement;
        new (): HTMLExpenseEditElement;
    };
    interface HTMLModeSwitcherElement extends Components.ModeSwitcher, HTMLStencilElement {
    }
    var HTMLModeSwitcherElement: {
        prototype: HTMLModeSwitcherElement;
        new (): HTMLModeSwitcherElement;
    };
    interface HTMLNavBarElement extends Components.NavBar, HTMLStencilElement {
    }
    var HTMLNavBarElement: {
        prototype: HTMLNavBarElement;
        new (): HTMLNavBarElement;
    };
    interface HTMLElementTagNameMap {
        "app-home": HTMLAppHomeElement;
        "app-profile": HTMLAppProfileElement;
        "app-root": HTMLAppRootElement;
        "create-expense": HTMLCreateExpenseElement;
        "custom-button": HTMLCustomButtonElement;
        "expense-chart": HTMLExpenseChartElement;
        "expense-details": HTMLExpenseDetailsElement;
        "expense-edit": HTMLExpenseEditElement;
        "mode-switcher": HTMLModeSwitcherElement;
        "nav-bar": HTMLNavBarElement;
    }
}
declare namespace LocalJSX {
    interface AppHome {
        "history"?: RouterHistory;
    }
    interface AppProfile {
        "match"?: MatchResults;
    }
    interface AppRoot {
    }
    interface CreateExpense {
        "history"?: RouterHistory;
    }
    interface CustomButton {
        "color"?: 'danger' | 'success' | 'secondary';
        "disabled"?: boolean;
        "onButtonClick"?: (event: CustomEvent<void>) => void;
        "type"?: 'button' | 'submit' | 'reset';
    }
    interface ExpenseChart {
        "history"?: RouterHistory;
    }
    interface ExpenseDetails {
        "match"?: MatchResults;
    }
    interface ExpenseEdit {
        "history"?: RouterHistory;
        "match"?: MatchResults;
    }
    interface ModeSwitcher {
    }
    interface NavBar {
        "items"?: { label: string; url: string }[];
    }
    interface IntrinsicElements {
        "app-home": AppHome;
        "app-profile": AppProfile;
        "app-root": AppRoot;
        "create-expense": CreateExpense;
        "custom-button": CustomButton;
        "expense-chart": ExpenseChart;
        "expense-details": ExpenseDetails;
        "expense-edit": ExpenseEdit;
        "mode-switcher": ModeSwitcher;
        "nav-bar": NavBar;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "app-home": LocalJSX.AppHome & JSXBase.HTMLAttributes<HTMLAppHomeElement>;
            "app-profile": LocalJSX.AppProfile & JSXBase.HTMLAttributes<HTMLAppProfileElement>;
            "app-root": LocalJSX.AppRoot & JSXBase.HTMLAttributes<HTMLAppRootElement>;
            "create-expense": LocalJSX.CreateExpense & JSXBase.HTMLAttributes<HTMLCreateExpenseElement>;
            "custom-button": LocalJSX.CustomButton & JSXBase.HTMLAttributes<HTMLCustomButtonElement>;
            "expense-chart": LocalJSX.ExpenseChart & JSXBase.HTMLAttributes<HTMLExpenseChartElement>;
            "expense-details": LocalJSX.ExpenseDetails & JSXBase.HTMLAttributes<HTMLExpenseDetailsElement>;
            "expense-edit": LocalJSX.ExpenseEdit & JSXBase.HTMLAttributes<HTMLExpenseEditElement>;
            "mode-switcher": LocalJSX.ModeSwitcher & JSXBase.HTMLAttributes<HTMLModeSwitcherElement>;
            "nav-bar": LocalJSX.NavBar & JSXBase.HTMLAttributes<HTMLNavBarElement>;
        }
    }
}
